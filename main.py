# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'design.ui'
#
# Created by: PyQt5 UI code generator 5.15.10
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import pandas as pd
from sklearn.svm import SVC
from sklearn.model_selection import train_test_split
from sklearn.ensemble import GradientBoostingClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import cross_val_score
from sklearn.metrics import f1_score
from sklearn.model_selection import KFold
import numpy as np
import itertools
import pickle
import re


class Model:
    def __init__(self, model, features, option, f1_score, accuracy):
        self.model = model
        self.features = features
        self.option = option
        self.f1_score = f1_score
        self.accuracy = accuracy


class Ui_MainWindow(object):
    def __init__(
        self, list_model, list_mon_hoc, list_mon_hoc_qua_khu, list_option
    ) -> None:
        self.list_model = list_model
        self.list_mon_hoc = list_mon_hoc
        self.list_mon_hoc_qua_khu = list_mon_hoc_qua_khu
        self.list_option = list_option
        self.current_index = 0
        self.current_list_gv = []

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(820, 480)
        icon = QtGui.QIcon()
        icon.addPixmap(
            QtGui.QPixmap("logo-ptit-resize.jpg"), QtGui.QIcon.Normal, QtGui.QIcon.Off
        )
        MainWindow.setWindowIcon(icon)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.horizontalLayoutWidget_2 = QtWidgets.QWidget(self.centralwidget)
        self.horizontalLayoutWidget_2.setGeometry(QtCore.QRect(10, 80, 801, 31))
        self.horizontalLayoutWidget_2.setObjectName("horizontalLayoutWidget_2")
        self.chon_mon_layout = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget_2)
        self.chon_mon_layout.setContentsMargins(0, 0, 0, 0)
        self.chon_mon_layout.setObjectName("chon_mon_layout")
        self.chon_mon_label = QtWidgets.QLabel(self.horizontalLayoutWidget_2)
        self.chon_mon_label.setObjectName("chon_mon_label")
        self.chon_mon_layout.addWidget(self.chon_mon_label)
        self.chon_mon_combo_box = QtWidgets.QComboBox(self.horizontalLayoutWidget_2)
        sizePolicy = QtWidgets.QSizePolicy(
            QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Fixed
        )
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(
            self.chon_mon_combo_box.sizePolicy().hasHeightForWidth()
        )
        self.chon_mon_combo_box.setSizePolicy(sizePolicy)
        self.chon_mon_combo_box.setObjectName("chon_mon_combo_box")
        for _ in self.list_mon_hoc:
            self.chon_mon_combo_box.addItem("")
        self.chon_mon_combo_box.currentIndexChanged.connect(
            self.on_chon_mon_hoc_changed
        )
        self.chon_mon_layout.addWidget(self.chon_mon_combo_box)
        self.horizontalLayoutWidget = QtWidgets.QWidget(self.centralwidget)
        self.horizontalLayoutWidget.setGeometry(QtCore.QRect(10, 10, 801, 61))
        self.horizontalLayoutWidget.setObjectName("horizontalLayoutWidget")
        self.header_layout = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget)
        self.header_layout.setContentsMargins(0, 0, 0, 0)
        self.header_layout.setObjectName("header_layout")
        self.logo_label = QtWidgets.QLabel(self.horizontalLayoutWidget)
        self.logo_label.setText("")
        self.logo_label.setPixmap(QtGui.QPixmap("logo-ptit-resize.jpg"))
        self.logo_label.setObjectName("logo_label")
        self.header_layout.addWidget(self.logo_label)
        self.header_vertical_layout = QtWidgets.QVBoxLayout()
        self.header_vertical_layout.setObjectName("header_vertical_layout")
        self.header_label_2 = QtWidgets.QLabel(self.horizontalLayoutWidget)
        sizePolicy = QtWidgets.QSizePolicy(
            QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Preferred
        )
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(
            self.header_label_2.sizePolicy().hasHeightForWidth()
        )
        self.header_label_2.setSizePolicy(sizePolicy)
        self.header_label_2.setObjectName("header_label_2")
        self.header_vertical_layout.addWidget(self.header_label_2)
        self.header_label_1 = QtWidgets.QLabel(self.horizontalLayoutWidget)
        sizePolicy = QtWidgets.QSizePolicy(
            QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Preferred
        )
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(
            self.header_label_1.sizePolicy().hasHeightForWidth()
        )
        self.header_label_1.setSizePolicy(sizePolicy)
        self.header_label_1.setObjectName("header_label_1")
        self.header_vertical_layout.addWidget(self.header_label_1)
        self.header_layout.addLayout(self.header_vertical_layout)
        # Group box thông tin cần thiết
        self.groupBox = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox.setEnabled(True)
        self.groupBox.setGeometry(QtCore.QRect(10, 120, 801, 311))
        self.groupBox.setObjectName("groupBox")
        self.vertical_layout_info = QtWidgets.QVBoxLayout(self.groupBox)
        self.vertical_layout_info.setObjectName("verticalLayout_8")
        # # Phần chọn giảng viên
        self.chon_gv_layout = QtWidgets.QFormLayout()
        self.chon_gv_layout.setObjectName("chon_gv_layout")
        self.chon_gv_label = QtWidgets.QLabel(self.groupBox)
        self.chon_gv_label.setObjectName("chon_gv_label")
        self.chon_gv_layout.setWidget(
            0, QtWidgets.QFormLayout.LabelRole, self.chon_gv_label
        )
        self.chon_gv_combo_box = QtWidgets.QComboBox(self.groupBox)
        self.chon_gv_combo_box.setObjectName("chon_gv_combo_box")
        self.chon_gv_layout.setWidget(
            0, QtWidgets.QFormLayout.FieldRole, self.chon_gv_combo_box
        )
        self.vertical_layout_info.addLayout(self.chon_gv_layout)
        # # Phần scroll area
        self.thong_tin_layout = QtWidgets.QVBoxLayout()
        self.thong_tin_layout.setObjectName("thong_tin_layout")
        self.mon_hoc_scroll_area = QtWidgets.QScrollArea(self.groupBox)
        self.mon_hoc_scroll_area.setWidgetResizable(True)
        self.mon_hoc_scroll_area.setObjectName("mon_hoc_scroll_area")
        self.scroll_area_widget = QtWidgets.QWidget()
        self.scroll_area_widget.setGeometry(QtCore.QRect(0, 0, 752, 489))
        self.scroll_area_widget.setObjectName("scroll_area_widget")
        self.vertical_layout_scroll_area = QtWidgets.QVBoxLayout(
            self.scroll_area_widget
        )
        self.vertical_layout_scroll_area.setObjectName("verticalLayout_4")
        self.mon_hoc_scroll_area.setWidget(self.scroll_area_widget)
        self.thong_tin_layout.addWidget(self.mon_hoc_scroll_area)
        self.vertical_layout_info.addLayout(self.thong_tin_layout)
        # # Phần chọn thuật toán
        self.choose_algorithm_layout = QtWidgets.QHBoxLayout()
        self.choose_algorithm_layout.setObjectName("choose_algorithm_layout")
        spacerItem = QtWidgets.QSpacerItem(
            40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum
        )
        self.choose_algorithm_layout.addItem(spacerItem)
        self.regression_radio_button = QtWidgets.QRadioButton(self.groupBox)
        sizePolicy = QtWidgets.QSizePolicy(
            QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed
        )
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(
            self.regression_radio_button.sizePolicy().hasHeightForWidth()
        )
        self.regression_radio_button.setSizePolicy(sizePolicy)
        self.regression_radio_button.setObjectName("regression_radio_button")
        self.choose_algorithm_layout.addWidget(self.regression_radio_button)
        self.gradient_boosting_radio_button = QtWidgets.QRadioButton(self.groupBox)
        self.gradient_boosting_radio_button.setObjectName(
            "gradient_boosting_radio_button"
        )
        self.gradient_boosting_radio_button.setChecked(True)
        self.choose_algorithm_layout.addWidget(self.gradient_boosting_radio_button)
        self.all_algorithms_radio_button = QtWidgets.QRadioButton(self.groupBox)
        self.all_algorithms_radio_button.setObjectName("all_algorithms_radio_button")
        self.choose_algorithm_layout.addWidget(self.all_algorithms_radio_button)
        spacerItem1 = QtWidgets.QSpacerItem(
            40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum
        )
        self.choose_algorithm_layout.addItem(spacerItem1)
        self.vertical_layout_info.addLayout(self.choose_algorithm_layout)
        # Nút dự đoán
        self.du_doan_button = QtWidgets.QPushButton(self.centralwidget)
        self.du_doan_button.setGeometry(QtCore.QRect(10, 440, 801, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(False)
        font.setWeight(50)
        self.du_doan_button.setFont(font)
        self.du_doan_button.setObjectName("du_doan_button")
        self.du_doan_button.clicked.connect(self.print_result)
        MainWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def delete_widgets_in_layout(self, layout: QtWidgets.QLayout):
        while layout.count():
            item = layout.takeAt(0)
            widget = item.widget()
            widget.deleteLater()

    def on_chon_mon_hoc_changed(self, index):
        if self.chon_mon_combo_box.currentIndex() == self.current_index:
            return
        self.current_index = self.chon_mon_combo_box.currentIndex()
        for i in range(self.vertical_layout_scroll_area.count()):
            group_box = self.vertical_layout_scroll_area.itemAt(i).widget()

            # Lấy QVBoxLayout bên trong group_box
            vertical_layout_group_box = group_box.layout()
            if vertical_layout_group_box and isinstance(
                vertical_layout_group_box, QtWidgets.QFormLayout
            ):
                while vertical_layout_group_box.rowCount() > 0:
                    vertical_layout_group_box.removeRow(0)
                vertical_layout_group_box.deleteLater()
            group_box.deleteLater()

        self.vertical_layout_scroll_area.update()

        self.tao_danh_sach_form_nhap_diem()

    def tao_form_chon_gv(self):
        self.chon_gv_layout = QtWidgets.QFormLayout()
        self.chon_gv_layout.setObjectName("chon_gv_layout")
        self.chon_gv_label = QtWidgets.QLabel(self.groupBox)
        self.chon_gv_label.setObjectName("chon_gv_label")
        self.chon_gv_layout.setWidget(
            0, QtWidgets.QFormLayout.LabelRole, self.chon_gv_label
        )
        self.chon_gv_combo_box = QtWidgets.QComboBox(self.groupBox)
        self.chon_gv_combo_box.setObjectName("chon_gv_combo_box")
        for _ in self.current_list_gv:
            self.chon_gv_combo_box.addItem("")
        self.chon_gv_layout.setWidget(
            0, QtWidgets.QFormLayout.FieldRole, self.chon_gv_combo_box
        )
        self.vertical_layout_info.addLayout(self.chon_gv_layout)

    def tao_danh_sach_form_nhap_diem(self):
        _translate = QtCore.QCoreApplication.translate
        for i, current_mon_hoc in enumerate(
            self.list_mon_hoc_qua_khu[self.current_index]
        ):
            group_box = QtWidgets.QGroupBox(self.scroll_area_widget)
            group_box.setObjectName(f"group_box_{i}")
            vertical_layout_group_box = QtWidgets.QVBoxLayout(group_box)
            vertical_layout_group_box.setObjectName(f"vertical_layout_{i}")
            form_layout = QtWidgets.QFormLayout()
            form_layout.setObjectName(f"form_layout_{i}")
            label_1 = QtWidgets.QLabel(group_box)
            label_1.setObjectName(f"label_{i}_1")
            form_layout.setWidget(0, QtWidgets.QFormLayout.LabelRole, label_1)
            line_edit_1 = QtWidgets.QLineEdit(group_box)
            line_edit_1.setObjectName(f"line_edit_{i}_1")
            form_layout.setWidget(0, QtWidgets.QFormLayout.FieldRole, line_edit_1)
            label_2 = QtWidgets.QLabel(group_box)
            label_2.setObjectName(f"label_{i}_2")
            form_layout.setWidget(1, QtWidgets.QFormLayout.LabelRole, label_2)
            line_edit_2 = QtWidgets.QLineEdit(group_box)
            line_edit_2.setObjectName(f"line_edit_{i}_2")
            form_layout.setWidget(1, QtWidgets.QFormLayout.FieldRole, line_edit_2)
            label_3 = QtWidgets.QLabel(group_box)
            label_3.setObjectName(f"label_{i}_3")
            form_layout.setWidget(2, QtWidgets.QFormLayout.LabelRole, label_3)
            line_edit_3 = QtWidgets.QLineEdit(group_box)
            line_edit_3.setObjectName(f"line_edit_{i}_3")
            form_layout.setWidget(2, QtWidgets.QFormLayout.FieldRole, line_edit_3)
            label_4 = QtWidgets.QLabel(group_box)
            label_4.setObjectName(f"label_{i}_4")
            form_layout.setWidget(3, QtWidgets.QFormLayout.LabelRole, label_4)
            line_edit_4 = QtWidgets.QLineEdit(group_box)
            line_edit_4.setObjectName(f"line_edit_{i}_4")
            form_layout.setWidget(3, QtWidgets.QFormLayout.FieldRole, line_edit_4)
            vertical_layout_group_box.addLayout(form_layout)
            self.vertical_layout_scroll_area.addWidget(group_box)
            group_box.setTitle(_translate("MainWindow", f"Điểm môn {current_mon_hoc}"))
            label_1.setText(_translate("MainWindow", "Lần 1"))
            label_2.setText(_translate("MainWindow", "Lần 2 (nếu có)"))
            label_3.setText(_translate("MainWindow", "Lần 3 (nếu có)"))
            label_4.setText(_translate("MainWindow", "Lần 4 (nếu có)"))

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(
            _translate("MainWindow", "Dự đoán khả năng đậu rớt một số môn học")
        )
        self.chon_mon_label.setText(
            _translate(
                "MainWindow",
                "<html><head/><body><p>Chọn môn học để dự đoán</p></body></html>",
            )
        )
        for i, mon_hoc in enumerate(self.list_mon_hoc):
            self.chon_mon_combo_box.setItemText(i, _translate("MainWindow", mon_hoc))
        self.header_label_2.setText(
            _translate(
                "MainWindow",
                '<html><head/><body><p><span style=" font-size:9pt; font-weight:600;">BỘ THÔNG TIN VÀ TRUYỀN THÔNG</span></p></body></html>',
            )
        )
        self.header_label_1.setText(
            _translate(
                "MainWindow",
                '<html><head/><body><p><span style=" font-size:10pt; font-weight:600; color:#ff0000;">HỌC VIỆN CÔNG NGHỆ BƯU CHÍNH VIỄN THÔNG CƠ SỞ TẠI THÀNH PHỐ HỒ CHÍ MINH</span></p></body></html>',
            )
        )
        self.groupBox.setTitle(_translate("MainWindow", "Thông tin cần thiết"))
        self.chon_gv_label.setText(_translate("MainWindow", "Chọn giảng viên"))
        if "MaNV" not in self.list_mon_hoc_qua_khu[self.current_index]:
            self.delete_widgets_in_layout(self.chon_gv_layout)
            self.chon_gv_layout.deleteLater()
        else:
            for i, gv in enumerate(self.current_list_gv):
                self.chon_gv_combo_box.setItemText(i, _translate("MainWindow", gv))

        for i, current_mon_hoc in enumerate(
            self.list_mon_hoc_qua_khu[self.current_index]
        ):
            group_box = QtWidgets.QGroupBox(self.scroll_area_widget)
            group_box.setObjectName(f"group_box_{i}")
            vertical_layout_group_box = QtWidgets.QVBoxLayout(group_box)
            vertical_layout_group_box.setObjectName(f"vertical_layout_{i}")
            form_layout = QtWidgets.QFormLayout()
            form_layout.setObjectName(f"form_layout_{i}")
            label_1 = QtWidgets.QLabel(group_box)
            label_1.setObjectName(f"label_{i}_1")
            form_layout.setWidget(0, QtWidgets.QFormLayout.LabelRole, label_1)
            line_edit_1 = QtWidgets.QLineEdit(group_box)
            line_edit_1.setObjectName(f"line_edit_{i}_1")
            form_layout.setWidget(0, QtWidgets.QFormLayout.FieldRole, line_edit_1)
            label_2 = QtWidgets.QLabel(group_box)
            label_2.setObjectName(f"label_{i}_2")
            form_layout.setWidget(1, QtWidgets.QFormLayout.LabelRole, label_2)
            line_edit_2 = QtWidgets.QLineEdit(group_box)
            line_edit_2.setObjectName(f"line_edit_{i}_2")
            form_layout.setWidget(1, QtWidgets.QFormLayout.FieldRole, line_edit_2)
            label_3 = QtWidgets.QLabel(group_box)
            label_3.setObjectName(f"label_{i}_3")
            form_layout.setWidget(2, QtWidgets.QFormLayout.LabelRole, label_3)
            line_edit_3 = QtWidgets.QLineEdit(group_box)
            line_edit_3.setObjectName(f"line_edit_{i}_3")
            form_layout.setWidget(2, QtWidgets.QFormLayout.FieldRole, line_edit_3)
            label_4 = QtWidgets.QLabel(group_box)
            label_4.setObjectName(f"label_{i}_4")
            form_layout.setWidget(3, QtWidgets.QFormLayout.LabelRole, label_4)
            line_edit_4 = QtWidgets.QLineEdit(group_box)
            line_edit_4.setObjectName(f"line_edit_{i}_4")
            form_layout.setWidget(3, QtWidgets.QFormLayout.FieldRole, line_edit_4)
            vertical_layout_group_box.addLayout(form_layout)
            self.vertical_layout_scroll_area.addWidget(group_box)
            group_box.setTitle(_translate("MainWindow", f"Điểm môn {current_mon_hoc}"))
            label_1.setText(_translate("MainWindow", "Lần 1"))
            label_2.setText(_translate("MainWindow", "Lần 2 (nếu có)"))
            label_3.setText(_translate("MainWindow", "Lần 3 (nếu có)"))
            label_4.setText(_translate("MainWindow", "Lần 4 (nếu có)"))
        self.regression_radio_button.setText(
            _translate("MainWindow", "Thuật toán hồi quy")
        )
        self.gradient_boosting_radio_button.setText(
            _translate("MainWindow", "Thuật toán Gradient Boosting")
        )
        self.all_algorithms_radio_button.setText(_translate("MainWindow", "Cả hai"))
        self.du_doan_button.setText(_translate("MainWindow", "DỰ ĐOÁN"))

    def is_number_with_one_dot(self, string):
        # Biểu thức chính quy kiểm tra chuỗi chỉ chứa số và duy nhất một dấu '.'
        pattern = r"^\d+(\.\d+)?$"
        return re.match(pattern, string) is not None

    def print_result(self):
        data_input = []
        # if "MaNV" in self.list_model[self.current_index].features:
        #     combo_box_value = self.chon_gv_combo_box.currentText()
        #     data_input.append(combo_box_value)
        values = []
        idx = []

        for i in range(self.vertical_layout_scroll_area.count()):
            # Lấy group_box từ QVBoxLayout
            group_box = self.vertical_layout_scroll_area.itemAt(i).widget()

            # Lấy QVBoxLayout bên trong group_box
            vertical_layout_group_box = group_box.layout()

            # Lấy QFormLayout từ QVBoxLayout
            form_layout = vertical_layout_group_box.itemAt(0).layout()

            sub_idx = []
            sub_values = []
            # Lấy giá trị từ các QLineEdit trong QFormLayout
            for j in range(form_layout.rowCount()):
                line_edit = form_layout.itemAt(
                    j, QtWidgets.QFormLayout.FieldRole
                ).widget()
                if line_edit.text():
                    sub_idx.append(j)
                    sub_values.append(line_edit.text())
                    # print(f"Giá trị của line_edit_{i+1}_{j+1}: {line_edit.text()}")
            if len(sub_values) > 0:
                idx.append(sub_idx)
                values.append(sub_values)
        if len(values) != self.vertical_layout_scroll_area.count():
            QtWidgets.QMessageBox.warning(
                MainWindow,
                "Thiếu dữ liệu",
                "Vui lòng nhập đầy đủ điểm các môn được cung cấp",
                QtWidgets.QMessageBox.Ok,
            )
            return

        for sub_idx in idx:
            if len(sub_idx) > 1:
                for i in range(1, len(sub_idx)):
                    if sub_idx[i] - sub_idx[i - 1] > 1:
                        QtWidgets.QMessageBox.warning(
                            MainWindow,
                            "Điểm cần liên tục",
                            "Vui lòng nhập điểm liên tục (lần 1, lần 2, lần 3,...)",
                            QtWidgets.QMessageBox.Ok,
                        )
                        return
            else:
                if sub_idx[0] != 0:
                    QtWidgets.QMessageBox.warning(
                        MainWindow,
                        "Điểm lần 1",
                        "Vui lòng nhập điểm lần 1 đúng ô 'Lần 1'",
                        QtWidgets.QMessageBox.Ok,
                    )
                    return
        input = []
        for sub_values in values:
            sub_inp = []
            for val in sub_values:
                if self.is_number_with_one_dot(val):
                    float_val = float(val)
                    if 0.0 <= float_val <= 10.0:
                        sub_inp.append(float_val)
                    else:
                        QtWidgets.QMessageBox.warning(
                            MainWindow,
                            "Không đúng định dạng",
                            "Vui lòng nhập điểm trong khoảng từ 0 đến 10",
                            QtWidgets.QMessageBox.Ok,
                        )
                        return
                else:
                    QtWidgets.QMessageBox.warning(
                        MainWindow,
                        "Không đúng định dạng",
                        "Vui lòng nhập một điểm có thực (chỉ toàn số, nếu có dấu '.' thì chỉ nên ở giữa 2 số, giá trị nằm trong đoạn từ 0.0 đến 10.0)",
                        QtWidgets.QMessageBox.Ok,
                    )
                    return

            if self.list_option[self.current_index] == "lonnhat":
                input.append(max(sub_inp))
            elif self.list_option[self.current_index] == "moinhat":
                input.append(sub_inp[0])
            elif self.list_option[self.current_index] == "trungbinh":
                input.append(sum(sub_inp) / len(sub_inp))

        str_res = ""
        if self.regression_radio_button.isChecked():
            model = pickle.load(
                open(
                    f"./models/thanh/models_{self.list_model[self.current_index][1]}.sav",
                    "rb",
                ),
                encoding="latin1",
            )
            result = "RỚT"
            if model.model.predict([input])[0] == 1:
                result = "ĐẬU"
            str_res = f"Kết quả dự đoán môn {self.list_mon_hoc[self.current_index]} là: {result}"

        elif self.gradient_boosting_radio_button.isChecked():
            model = pickle.load(
                open(
                    f"./models/thanh/models_{self.list_model[self.current_index][0]}.sav",
                    "rb",
                ),
                encoding="latin1",
            )
            result = "RỚT"
            if model.model.predict([input])[0] == 1:
                result = "ĐẬU"
            str_res = f"Kết quả dự đoán môn {self.list_mon_hoc[self.current_index]} là: {result}"

        elif self.all_algorithms_radio_button.isChecked():
            model_1 = pickle.load(
                open(
                    f"./models/thanh/models_{self.list_model[self.current_index][1]}.sav",
                    "rb",
                ),
                encoding="latin1",
            )
            model_2 = pickle.load(
                open(
                    f"./models/thanh/models_{self.list_model[self.current_index][0]}.sav",
                    "rb",
                ),
                encoding="latin1",
            )
            result_1 = "RỚT"
            result_2 = "RỚT"
            if model_1.model.predict([input])[0] == 1:
                result_1 = "ĐẬU"
            if model_2.model.predict([input])[0] == 1:
                result_2 = "ĐẬU"
            str_res = f"Kết quả dự đoán môn {self.list_mon_hoc[self.current_index]} của mô hình Gradient Boosting là: {result_2}"
            str_res += f"\nKết quả dự đoán môn {self.list_mon_hoc[self.current_index]} của mô hình Hồi quy là: {result_1}"

        str_res += "\n(*) Kết quả chỉ mang tính chất tham khảo"
        QtWidgets.QMessageBox.information(
            MainWindow,
            "Kết quả dự đoán",
            str_res,
            QtWidgets.QMessageBox.Ok,
        )


if __name__ == "__main__":
    import sys

    my_url = "."

    list_model = [
        ["INT1306_gb", "INT1306_lr"],
        ["INT1332_gb", "INT1332_lr"],
        ["INT1434_3_gb", "INT1434_3_lr"],
    ]
    list_option = ["moinhat", "trungbinh", "moinhat"]
    list_mon_hoc = [
        "Cấu trúc dữ liệu và giải thuật",
        "Lập trình hướng đối tượng",
        "Lập trình web",
    ]
    list_mon_hoc_qua_khu = [
        ["Ngôn ngữ lập trình C++", "Tin học cơ sở 2", "Toán rời rạc 1"],
        [
            "Ngôn ngữ lập trình C++",
            "Cấu trúc dữ liệu và giải thuật",
        ],
        ["Ngôn ngữ lập trình C++", "Lập trình hướng đối tượng", "Cơ sở dữ liệu"],
    ]

    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow(list_model, list_mon_hoc, list_mon_hoc_qua_khu, list_option)
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
